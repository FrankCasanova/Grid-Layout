Grid Container: va a ser el elemento padre que va a tener puesto un nuevo tipo de display: grid. Nos permite colocar otras propiedades para manipular nuestro layaout.

Grid Item: Son nuestro componentes, contenido, lo que vamos a manejar. Nuestras filas o columnas que vamos a mover a nuestro gusto. Son hijos directos de grid.

Grid Line: Lineas divisorias horizontales y verticales.

Grid Track: Espacio entre dos líneas adyacentes. Filas y columnas.

Grid Cell: Celdas, espacio en dos filas adyacentes y 2 columnas adyacentes.

Grid Area: Espacio rodeado por 4 grid lines

https://css-tricks.com/snippets/css/complete-guide-grid/

//////////////////////////

Grid explicito (explicit grid) es cuando nosotros definimos el numero de filas o columnas.
Grid implicito (implicit grid) es cuando tenemos filas o columnas que no definimos pero son parte de nuestro grid.

Aqui dejo un enlace donde se explica mas a detalle:
Implicit/Explicit Grid

//////////////

Display subgrid para heredar la configuración del grid padre (cuando se esten anidando grids).

display: subgrid; // No disponible aun

Display inline-grid muestra el grid en una sola linea:

display: inline-grid; // No disponible aun

//////////////////////////////

⚠️ Importante: Chrome 66 hizo cambios en css-grid, específicamente en gap y ahora es simplemente gap:

    grid-grap a gap
    grid-row-gap a row-grap
    grid-column-grap a column-grap

Fuente: Twitter

////////////////////////////////////////////////////////

Unidad de medida: fracciones fr distrubuye el espacio disponible en formas iguales.
Funciones:
repeat(cantidad, valor) para usar el mismo valor varias veces
minmax(min, max) agregar un valor minimo y maximo para el tamaño al hacer responsive

//////////////////////////////////////////////

Para definir las areas
Si vamos a usar area en más de una columna colocamos el mismo donde del area donde la queramos. Ejemplo:

grid-template-areas: "header header"
                                 "left contenido"
                                 "footer footer";

Para usar estas areas:

.header {
	grid-area: header:
}

/////////////////////////////////////

Definir el tamaño de las columnas dentro de un grid:

grid-column-start: 1;
grid-column-end: 3;

Para escribir esto en una sola linea:

grid-column: inicio / final;

Para usar por espacios: span #
Para usar el espacio de toda la columna usamos -1 al final Ejemplo: grid-column: 1/ -1;

/////////////////////////////////////////////

¡Hola amigos!

Yo creo que no hace falta definir la linea donde inicia cada elemento. Ya que yo solamente puse span (numero de espacios) en grid-column y en grid-row y funciona correctamente.

		.item-grid:nth-of-type(1){
			grid-column: span 3;
			grid-row: span 2;
		}
		.item-grid:nth-of-type(2){
			grid-column: span 2;
			grid-row: span 2;
		}
		.item-grid:nth-of-type(3){
			grid-column: span 2;
		}

///////////////////////////////////////

Para nombrar lineas colocamos el nombre entre [ ]. Ejemplo:

grid-template-columns: [inicio] 1fr [linea2] 1fr [final];

En estos casos no podemos usar la función repeat()

////////////////////////////////

Para cambiar el flujo automático de mi grid:

grid-auto-flow: column;

Por defecto viene grid-auto-flow: row;
Para asignar el valor por defecto de el espacio de las columnas o filas que no han sido asignadas:

grid-auto-columns: valores;
grid-auto-rows: valores;

////////////////////

Para alinear contenido:
justify-items: valor; para alineación horizontal
align-items: valor; para alineación vertical
Los valores que toman por defecto es stretch el cual hace que tomen todo el valor asignado en la fila o columna.

Para asignar la alineación de un solo elemento podemos usar:

align-self: valor;
justify-self: valor;

